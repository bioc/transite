// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// scoreSequences
SEXP scoreSequences(Rcpp::List sequences, Rcpp::NumericMatrix pwm);
RcppExport SEXP _transite_scoreSequences(SEXP sequencesSEXP, SEXP pwmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type sequences(sequencesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type pwm(pwmSEXP);
    rcpp_result_gen = Rcpp::wrap(scoreSequences(sequences, pwm));
    return rcpp_result_gen;
END_RCPP
}
// calculateKmerScores
Rcpp::NumericVector calculateKmerScores(Rcpp::List kmers, Rcpp::NumericMatrix pwm);
RcppExport SEXP _transite_calculateKmerScores(SEXP kmersSEXP, SEXP pwmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type kmers(kmersSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type pwm(pwmSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateKmerScores(kmers, pwm));
    return rcpp_result_gen;
END_RCPP
}
// lookupKmerScores
Rcpp::NumericVector lookupKmerScores(Rcpp::List kmers, Rcpp::Environment kmerScores);
RcppExport SEXP _transite_lookupKmerScores(SEXP kmersSEXP, SEXP kmerScoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type kmers(kmersSEXP);
    Rcpp::traits::input_parameter< Rcpp::Environment >::type kmerScores(kmerScoresSEXP);
    rcpp_result_gen = Rcpp::wrap(lookupKmerScores(kmers, kmerScores));
    return rcpp_result_gen;
END_RCPP
}
// computeMotifScore
Rcpp::DataFrame computeMotifScore(Rcpp::List kmers);
RcppExport SEXP _transite_computeMotifScore(SEXP kmersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type kmers(kmersSEXP);
    rcpp_result_gen = Rcpp::wrap(computeMotifScore(kmers));
    return rcpp_result_gen;
END_RCPP
}
// calculateLocalConsistency
Rcpp::List calculateLocalConsistency(Rcpp::NumericVector x, int numPermutations, int minPermutations, int e);
RcppExport SEXP _transite_calculateLocalConsistency(SEXP xSEXP, SEXP numPermutationsSEXP, SEXP minPermutationsSEXP, SEXP eSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type numPermutations(numPermutationsSEXP);
    Rcpp::traits::input_parameter< int >::type minPermutations(minPermutationsSEXP);
    Rcpp::traits::input_parameter< int >::type e(eSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateLocalConsistency(x, numPermutations, minPermutations, e));
    return rcpp_result_gen;
END_RCPP
}
// calculateTranscriptMC
Rcpp::List calculateTranscriptMC(Rcpp::NumericVector absoluteHits, Rcpp::NumericVector totalSites, double relHitsForeground, int n, int maxPermutations, int minPermutations, int e);
RcppExport SEXP _transite_calculateTranscriptMC(SEXP absoluteHitsSEXP, SEXP totalSitesSEXP, SEXP relHitsForegroundSEXP, SEXP nSEXP, SEXP maxPermutationsSEXP, SEXP minPermutationsSEXP, SEXP eSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type absoluteHits(absoluteHitsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type totalSites(totalSitesSEXP);
    Rcpp::traits::input_parameter< double >::type relHitsForeground(relHitsForegroundSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type maxPermutations(maxPermutationsSEXP);
    Rcpp::traits::input_parameter< int >::type minPermutations(minPermutationsSEXP);
    Rcpp::traits::input_parameter< int >::type e(eSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateTranscriptMC(absoluteHits, totalSites, relHitsForeground, n, maxPermutations, minPermutations, e));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_transite_scoreSequences", (DL_FUNC) &_transite_scoreSequences, 2},
    {"_transite_calculateKmerScores", (DL_FUNC) &_transite_calculateKmerScores, 2},
    {"_transite_lookupKmerScores", (DL_FUNC) &_transite_lookupKmerScores, 2},
    {"_transite_computeMotifScore", (DL_FUNC) &_transite_computeMotifScore, 1},
    {"_transite_calculateLocalConsistency", (DL_FUNC) &_transite_calculateLocalConsistency, 4},
    {"_transite_calculateTranscriptMC", (DL_FUNC) &_transite_calculateTranscriptMC, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_transite(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
